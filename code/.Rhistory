Get lon lat based on the geometric centroid of the block
centroids <- ms_blokcs %>% st_centroid()
library(dplyr)
centroids <- ms_blokcs %>% st_centroid()
library(dplyr)
centroids <- ms_blokcs %>% st_centroid()
centroids <- ms_blocks %>% st_centroid()
library(sf)
centroids <- ms_blocks %>% st_centroid()
centroids <- ms_blocks %>% st_centroid()
ms_blocks <- blocks(
state = "NE",
year = 2020
)
library(tidycensus)
library(dplyr)
library(sf)
library(mapview)
library(tidycensus)
library(dplyr)
library(sf)
library(mapview)
missing_states <- c("NE", "OR", "GA", "AL", "HI", "NV", "ID", "NH", "MS")
ms <- get_acs(geography = "county",
year = 2019,
variables = c(median_household_income = "B19013_001"),
survey = "acs5",
output = "wide",
state = missing_states,
geometry = T)
ms
summary(ms)
ms_blocks <- blocks(
state = "NE",
year = 2020
)
library(tigris)
library(tidycensus)
library(tigris)
library(dplyr)
library(sf)
library(mapview)
ms_blocks <- blocks(
state = "NE",
year = 2020
)
summary(ms_blocks)
head(ms_blocks)
centroids <- ms_blocks %>% st_centroid()
centroids
ms_blocks <- blocks(
state = "NE",
year = 2020
)
summary(ms_blocks)
head(ms_blocks)
ms_blocks['centroid'] <- ms_blocks %>% st_centroid()
ms_blocks
ms_blocks['centroid'] <- ms_blocks['geometry'] %>% st_centroid()
ms_blocks
library(tqdm)
library(tidygeocoder)
ms_blocks['lon'] <- ms_blocks['centroid'][0]
ms_blocks['lat'] <- ms_blocks['centroid'][1]
ms_blocks
ms_blocks['lat'] <- ms_blocks['centroid'][0][1]
ms_blocks
ms_blocks['centroid'][0][0]
ms_blocks['centroid'][0]
ms_blocks['centroid'][0].X
ms_blocks['centroid'].X
ms_blocks['centroid']$X
ms_blocks['centroid']['X']
ms_blocks['centroid'][0]
ms_blocks['centroid'][0][0]
ms_blocks['centroid'][0][0][0]
x <- ms_blocks['centroid']
x
ms_blocks %>% mutate(long = unlist(map(ms_blocks$centroid,1)),
lat = unlist(map(ms_blocks$centroid,2)))
library(tidyverse)
ms_blocks['centroid'] <- ms_blocks['geometry'] %>% st_centroid()
ms_blocks %>% mutate(long = unlist(map(ms_blocks$centroid,1)),
lat = unlist(map(ms_blocks$centroid,2)))
ms_blocks
ms_blocks
ms_blocks %>% mutate(long = unlist(map(ms_blocks$centroid,1)),
lat = unlist(map(ms_blocks$centroid,2)))
rbind(ms_blocks, ms_blocks %>% mutate(long = unlist(map(ms_blocks$centroid,1)),
lat = unlist(map(ms_blocks$centroid,2))))
lonlat <- ms_blocks %>% mutate(long = unlist(map(ms_blocks$centroid,1)),
lat = unlist(map(ms_blocks$centroid,2)))
lonlat <- ms_blocks %>% mutate(long = unlist(map(ms_blocks$centroid,1)),
lat = unlist(map(ms_blocks$centroid,2)))
ms_blocks <- rbind(ms_blocks, lonlat)
lonlat
reverse <-  lonlat %>% reverse_geocode(lat = lat, long = long, method = 'osm',
address = address_found, full_results = FALSE)
for(county in unique(lonlat['COUNTYFP20'])){
print(county)
}
for(county in unique(lonlat['COUNTYFP20'])){
# print(county)
df <- lonlat[lonlat$COUNTYFP20 == county,]
print(df)
}
for(county in unique(lonlat['COUNTYFP20'])){
# print(county)
df <- lonlat[lonlat$COUNTYFP20 == county]
print(df)
}
for(county in unique(lonlat['COUNTYFP20'])){
# print(county)
df <- lonlat[lonlat$COUNTYFP20 == county,]
print(df)
}
for(county in unique(lonlat['COUNTYFP20'])){
# print(county)
df <- lonlat[lonlat['COUNTYFP20'] == county,]
print(df)
}
for(county in unique(lonlat['COUNTYFP20'])){
# print(county)
df <- filter(lonlat, COUNTYFP20 == county)
print(df)
}
print(county)
for(county in unique(lonlat['COUNTYFP20'])){
print(county)
}
filter(lonlat, COUNTYFP20 == "017")
unique(lonlat['COUNTYFP20'])
unique(lonlat$COUNTYFP20)
sort(unique(lonlat$COUNTYFP20))
for(county in sort(unique(lonlat$COUNTYFP20))){
print(county)
}
for(county in sort(unique(lonlat$COUNTYFP20))){
filter(lonlat, COUNTYFP20 == "017")
}
for(county in sort(unique(lonlat$COUNTYFP20))){
filter(lonlat, COUNTYFP20 == county)
}
for(county in sort(unique(lonlat$COUNTYFP20))){
df<- filter(lonlat, COUNTYFP20 == county)
}
for(county in sort(unique(lonlat$COUNTYFP20))){
df<- filter(lonlat, COUNTYFP20 == county)
print(nrows(df))
}
for(county in sort(unique(lonlat$COUNTYFP20))){
df<- filter(lonlat, COUNTYFP20 == county)
print(nrow(df))
}
for(tract in sort(unique(lonlat$TRACTCE20))){
df<- filter(lonlat, TRACTCE20 == tract)
print(nrow(df))
}
for(block in sort(unique(lonlat$NAME20))){
df<- filter(lonlat, NAME20 == block)
print(nrow(df))
}
unique(lonlat$BLOCKCE20)
count(unique(lonlat$BLOCKCE20))
size_sum(unique(lonlat$BLOCKCE20))
size_sum(unique(lonlat$BLOCKCE20))
for(block in sort(unique(lonlat$BLOCKCE20))){
df<- filter(lonlat, BLOCKCE20 == block)
print(nrow(df))
}
